#!/bin/bash

# Docker MCP Gateway Installation Script
# Compatible with Ubuntu and macOS
# Author: Generated by Claude Code
# Description: Installs Docker MCP Gateway and connects it to Claude Code

set -e  # Exit on any error

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Detect OS
detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if command -v apt-get >/dev/null 2>&1; then
            OS="ubuntu"
        elif command -v yum >/dev/null 2>&1; then
            OS="centos"
        else
            OS="linux"
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macos"
    else
        log_error "Unsupported operating system: $OSTYPE"
        exit 1
    fi
    log_info "Detected OS: $OS"
}

# Check prerequisites
check_prerequisites() {
    log_info "Checking prerequisites..."
    
    # Check Docker
    if ! command -v docker >/dev/null 2>&1; then
        log_error "Docker is not installed. Please install Docker first."
        if [[ "$OS" == "ubuntu" ]]; then
            log_info "Install Docker on Ubuntu: https://docs.docker.com/engine/install/ubuntu/"
        elif [[ "$OS" == "macos" ]]; then
            log_info "Install Docker on macOS: https://docs.docker.com/desktop/install/mac-install/"
        fi
        exit 1
    fi
    
    # Check Claude Code
    if ! command -v claude >/dev/null 2>&1; then
        log_error "Claude Code is not installed. Please install Claude Code first."
        log_info "Install Claude Code: curl -fsSL https://claude.ai/install.sh | sh"
        exit 1
    fi
    
    # Check Git
    if ! command -v git >/dev/null 2>&1; then
        log_error "Git is not installed. Please install Git first."
        exit 1
    fi
    
    log_success "All prerequisites are met"
}

# Install Go based on OS
install_go() {
    log_info "Installing Go..."
    
    if command -v go >/dev/null 2>&1; then
        log_info "Go is already installed: $(go version)"
        return 0
    fi
    
    case $OS in
        ubuntu)
            sudo apt update
            sudo apt install -y golang-go
            ;;
        macos)
            if command -v brew >/dev/null 2>&1; then
                brew install go
            else
                log_error "Homebrew not found. Please install Go manually or install Homebrew first."
                log_info "Install Homebrew: /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
                exit 1
            fi
            ;;
        *)
            log_error "Please install Go manually for your system"
            exit 1
            ;;
    esac
    
    # Verify Go installation
    if command -v go >/dev/null 2>&1; then
        log_success "Go installed successfully: $(go version)"
    else
        log_error "Go installation failed"
        exit 1
    fi
}

# Create Docker CLI plugins directory
setup_docker_plugins_dir() {
    log_info "Setting up Docker CLI plugins directory..."
    mkdir -p "$HOME/.docker/cli-plugins/"
    log_success "Docker CLI plugins directory created"
}

# Build and install Docker MCP Gateway
install_mcp_gateway() {
    log_info "Installing Docker MCP Gateway..."
    
    # Create temporary directory
    TEMP_DIR=$(mktemp -d)
    cd "$TEMP_DIR"
    
    # Clone repository
    log_info "Cloning Docker MCP Gateway repository..."
    git clone https://github.com/docker/mcp-gateway.git
    cd mcp-gateway
    
    # Build and install
    log_info "Building Docker MCP Gateway..."
    make docker-mcp
    
    # Verify installation
    cd "$HOME"
    rm -rf "$TEMP_DIR"
    
    if docker mcp --help >/dev/null 2>&1; then
        log_success "Docker MCP Gateway installed successfully"
    else
        log_error "Docker MCP Gateway installation failed"
        exit 1
    fi
}

# Initialize MCP environment
initialize_mcp() {
    log_info "Initializing MCP environment..."
    
    # Initialize catalog
    docker mcp catalog init
    log_success "MCP catalog initialized"
    
    # Enable default useful servers
    log_info "Enabling default MCP servers..."
    docker mcp server enable duckduckgo
    docker mcp server enable github
    
    # Verify enabled servers
    ENABLED_SERVERS=$(docker mcp server ls)
    log_success "Enabled servers: $ENABLED_SERVERS"
}

# Connect Claude Code to MCP Gateway
connect_claude_code() {
    log_info "Connecting Claude Code to MCP Gateway..."
    
    # Add MCP gateway to Claude Code
    claude mcp add --transport stdio --scope user mcp-gateway docker mcp gateway run
    
    # Verify connection
    if claude mcp list | grep -q "mcp-gateway"; then
        log_success "Claude Code connected to MCP Gateway successfully"
    else
        log_error "Failed to connect Claude Code to MCP Gateway"
        exit 1
    fi
}

# Display available tools
show_available_tools() {
    log_info "Available MCP tools:"
    echo ""
    docker mcp tools ls | head -20
    echo ""
    TOTAL_TOOLS=$(docker mcp tools ls | grep -c "^ - " || echo "0")
    log_success "Total available tools: $TOTAL_TOOLS"
}

# Display usage instructions
show_usage() {
    echo ""
    echo "==================== INSTALLATION COMPLETE ===================="
    echo ""
    log_success "Docker MCP Gateway is now installed and configured!"
    echo ""
    echo "ðŸ“‹ USEFUL COMMANDS:"
    echo ""
    echo "Browse MCP Catalog:"
    echo "  docker mcp catalog show              # Browse 100+ available servers"
    echo ""
    echo "Manage MCP Servers:"
    echo "  docker mcp server ls                 # List enabled servers"
    echo "  docker mcp server enable <name>      # Enable new servers"
    echo "  docker mcp server disable <name>     # Disable servers"
    echo ""
    echo "View Available Tools:"
    echo "  docker mcp tools ls                  # See all tools from enabled servers"
    echo ""
    echo "Claude Code Integration:"
    echo "  claude mcp list                      # List configured MCP servers"
    echo ""
    echo "ðŸŽ¯ NEXT STEPS:"
    echo "1. Browse available servers: docker mcp catalog show"
    echo "2. Enable more servers: docker mcp server enable <server-name>"
    echo "3. Start using MCP tools in Claude Code conversations!"
    echo ""
    echo "==============================================================="
}

# Main installation function
main() {
    echo "==================== Docker MCP Gateway Installer ===================="
    echo ""
    
    detect_os
    check_prerequisites
    install_go
    setup_docker_plugins_dir
    install_mcp_gateway
    initialize_mcp
    connect_claude_code
    show_available_tools
    show_usage
}

# Run main function
main "$@"